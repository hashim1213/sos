// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STAFF
  ORGANIZER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole
  verified      Boolean   @default(false)
  
  // Relations
  staff         Staff?
  organizer     Organizer?
  refreshTokens RefreshToken[]
  applications  Application[] @relation("StaffApplications")
  jobs          Job[]         @relation("OrganizerJobs")
  bookings      Booking[]     @relation("OrganizerBookings")
  staffBookings Booking[]     @relation("StaffBookings")
  reviewsGiven  Review[]      @relation("ReviewerRelation")
  reviewsReceived Review[]    @relation("RevieweeRelation")
}

model Staff {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  jobTitle        String?
  hourlyRate      Float?
  yearsExperience String?
  skills          String[]
  address         String?
  city            String?
  province        String?
  postalCode      String?
  avatar          String?
  rating          Float     @default(0)
  reviewCount     Int       @default(0)
  
  // Availability
  availableDays   String[]
  preferredHours  String?
  noticeRequired  String?
  
  // Background check status
  backgroundCheck Boolean   @default(false)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Organizer {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName     String?
  bio             String?
  address         String?
  city            String?
  province        String?
  postalCode      String?
  eventTypes      String[]
  avatar          String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
}

model Job {
  id          Int      @id @default(autoincrement())
  organizerId String
  organizer   User     @relation("OrganizerJobs", fields: [organizerId], references: [id])
  title       String
  description String?
  jobType     String
  location    String
  date        DateTime
  startTime   String
  duration    Int
  hourlyRate  Float
  status      String   @default("open") // open, filled, cancelled, completed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  applications Application[]
  bookings     Booking[]
}

model Application {
  id        Int      @id @default(autoincrement())
  jobId     Int
  job       Job      @relation(fields: [jobId], references: [id])
  staffId   String
  staff     User     @relation("StaffApplications", fields: [staffId], references: [id])
  status    String   @default("pending") // pending, accepted, rejected, withdrawn
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id            Int      @id @default(autoincrement())
  jobId         Int
  job           Job      @relation(fields: [jobId], references: [id])
  staffId       String
  staff         User     @relation("StaffBookings", fields: [staffId], references: [id])
  organizerId   String
  organizer     User     @relation("OrganizerBookings", fields: [organizerId], references: [id])
  status        String   @default("confirmed") // confirmed, cancelled, completed
  totalAmount   Float
  serviceFee    Float
  paymentStatus String   @default("pending") // pending, paid, refunded
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  reviews       Review[]
}

model Review {
  id          Int      @id @default(autoincrement())
  bookingId   Int
  booking     Booking  @relation(fields: [bookingId], references: [id])
  reviewerId  String
  reviewer    User     @relation("ReviewerRelation", fields: [reviewerId], references: [id])
  revieweeId  String
  reviewee    User     @relation("RevieweeRelation", fields: [revieweeId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}
